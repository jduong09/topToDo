(()=>{const e=e=>{const o=function(e,t,n,o,d){return this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.notes=d,{title:e,dueDate:n}}(e[0].value,e[1].value,e[2].value,e[3].value,e[4].value);n.addTodo(o),t.addNewTodo(o)},t={addNewTodo:e=>{const t=document.getElementById("content"),n=document.createElement("div");n.innerHTML=`${e.title}, ${e.dueDate}`,t.append(n)}};(()=>{const e=document.createElement("div");e.id="content";const t=document.createElement("button");t.innerHTML="+",t.addEventListener("click",(e=>{e.preventDefault(),console.log(e)})),e.append(t),document.querySelector("body").appendChild(e)})(),(()=>{const t=document.getElementById("content"),n=document.createElement("form");n.id="form-create-todo";const o=["title","description","due-date","priority","notes"];for(let e=0;e<o.length;e++){const t=o[e],d=document.createElement("label");d.setAttribute("for",t);const c=document.createElement("input");c.id=t,c.setAttribute("name",t),"title"===t||"description"===t?c.type="text":"due-date"===t&&(c.type="date"),n.append(d,c)}const d=document.createElement("button");d.id="button-submit",d.type="submit",d.innerHTML="Create Todo",d.addEventListener("click",(t=>{t.preventDefault(),e(n.elements)})),n.appendChild(d),t.append(n)})();const n=function(e){this.name=e;let t=[];return{name:e,addTodo:e=>{t.push(e)},todos:t}}("today")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiTUEwRkEsTUE0RE1BLEVBRVNDLElBQ1gsTUFBTUMsRUF0SFYsU0FBY0MsRUFBT0MsRUFBYUMsRUFBU0MsRUFBVUMsR0FPbkQsT0FOQUMsS0FBS0wsTUFBUUEsRUFDYkssS0FBS0osWUFBY0EsRUFDbkJJLEtBQUtILFFBQVVBLEVBQ2ZHLEtBQUtGLFNBQVdBLEVBQ2hCRSxLQUFLRCxNQUFRQSxFQUVOLENBQUVKLFFBQU9FLFVBQ2xCLENBOEdvQkksQ0FBS1IsRUFBUyxHQUFHUyxNQUFPVCxFQUFTLEdBQUdTLE1BQU9ULEVBQVMsR0FBR1MsTUFBT1QsRUFBUyxHQUFHUyxNQUFPVCxFQUFTLEdBQUdTLE9BQzdHQyxFQUFhQyxRQUFRVixHQUNyQlcsRUFBV0MsV0FBV1osRUFBUSxFQUk1QlcsRUFBYSxDQUNqQkMsV0FBYUMsSUFDWCxNQUFNQyxFQUFhQyxTQUFTQyxlQUFlLFdBRXJDQyxFQUFVRixTQUFTRyxjQUFjLE9BQ3ZDRCxFQUFRRSxVQUFZLEdBQUdOLEVBQUtaLFVBQVVZLEVBQUtWLFVBRTNDVyxFQUFXTSxPQUFPSCxFQUFRLEdBNUVaLE1BQ2hCLE1BQU1JLEVBQVVOLFNBQVNHLGNBQWMsT0FDdkNHLEVBQVFDLEdBQUssVUFDYixNQUFNQyxFQUFnQlIsU0FBU0csY0FBYyxVQUM3Q0ssRUFBY0osVUFBWSxJQUUxQkksRUFBY0MsaUJBQWlCLFNBQVVDLElBQ3ZDQSxFQUFFQyxpQkFFRkMsUUFBUUMsSUFBSUgsRUFBRSxJQUdoQkosRUFBUUQsT0FBT0csR0FDZlIsU0FBU2MsY0FBYyxRQUFRQyxZQUFZVCxFQUFRLEVBb0VyRFUsR0FqRW1CLE1BQ2pCLE1BQU1WLEVBQVVOLFNBQVNDLGVBQWUsV0FDbENnQixFQUFPakIsU0FBU0csY0FBYyxRQUNwQ2MsRUFBS1YsR0FBSyxtQkFFVixNQUFNVyxFQUFTLENBQUMsUUFBUyxjQUFlLFdBQVksV0FBWSxTQUVoRSxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUQsRUFBT0UsT0FBUUQsSUFBSyxDQUN0QyxNQUFNRSxFQUFZSCxFQUFPQyxHQUVuQkcsRUFBUXRCLFNBQVNHLGNBQWMsU0FDckNtQixFQUFNQyxhQUFhLE1BQU9GLEdBRTFCLE1BQU1HLEVBQVF4QixTQUFTRyxjQUFjLFNBQ3JDcUIsRUFBTWpCLEdBQUtjLEVBQ1hHLEVBQU1ELGFBQWEsT0FBUUYsR0FFVCxVQUFkQSxHQUF1QyxnQkFBZEEsRUFDM0JHLEVBQU1DLEtBQU8sT0FDVSxhQUFkSixJQUNURyxFQUFNQyxLQUFPLFFBR2ZSLEVBQUtaLE9BQU9pQixFQUFPRSxFQUNyQixDQUdBLE1BQU1FLEVBQVkxQixTQUFTRyxjQUFjLFVBQ3pDdUIsRUFBVW5CLEdBQUssZ0JBQ2ZtQixFQUFVRCxLQUFPLFNBQ2pCQyxFQUFVdEIsVUFBWSxjQUV0QnNCLEVBQVVqQixpQkFBaUIsU0FBVUMsSUFDbkNBLEVBQUVDLGlCQUVGNUIsRUFBMEJrQyxFQUFLVSxTQUFTLElBRzFDVixFQUFLRixZQUFZVyxHQUVqQnBCLEVBQVFELE9BQU9ZLEVBQUssRUEwQnRCVyxHQUNBLE1BQU1sQyxFQWhJTixTQUFpQm1DLEdBQ2Z0QyxLQUFLc0MsS0FBT0EsRUFDWixJQUFJQyxFQUFRLEdBTVosTUFBTyxDQUFFRCxPQUFNbEMsUUFKRUcsSUFDZmdDLEVBQU1DLEtBQUtqQyxFQUFLLEVBR01nQyxRQUMxQixDQXVIcUJFLENBQVEsUSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvcHRvZG8vLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQnVpbGQgZnJvbSB0aGUgaW5zaWRlIG91dCAqL1xuXG4vKiBUbyBETyBBcHAgKi9cblxuLyogXG4gIFRvIERvIE9iamVjdFxuICBDb25zdHJ1Y3RvclxuICB7XG4gICAgVGl0bGU6ICdIZWxsbydcbiAgICBEZXNjcmlwdGlvbjogJ0hlbGxvIGkgbmVlZCB0byBkbyB0aGlzJ1xuICAgIER1ZSBEYXRlOiBNTS9ERC9ZWVlZXG4gICAgcHJpb3JpdHk6IExvdy9NZWQvSGlnaFxuICAgIG5vdGVzOiAnZmprZGFmamthZDtsJ1xuICB9XG5cbiAgVG9EbyBDb250cm9sbGVyXG5cbiAgQ1JVRFxuICBDcmVhdGUgVG9kb1xuICBSZWFkIFRvZG9cbiAgVXBkYXRlIFRvZG9cbiAgRGVsZXRlIFRvZG9cblxuICBUbyBkbyBvYmplY3QgaXMgYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgYXMgc29tZXRoaW5nIHRoYXQgbmVlZHMgdG8gYmUgZG9uZS5cblxuICBQcm9qZWN0XG4gIENvbnN0cnVjdG9yKCkge1xuICAgIGFycmF5ID0gW107XG4gIH1cblxuICByZWFkVG9Eb3NcbiAgR3JvdXBzIG9mIFRvZG9zLlxuICBbVG9EbywgVG9EbywgVG9Eb11cbiovXG5cbmZ1bmN0aW9uIFRvRG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgbm90ZXMpIHtcbiAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgdGhpcy5ub3RlcyA9IG5vdGVzO1xuXG4gIHJldHVybiB7IHRpdGxlLCBkdWVEYXRlIH07XG59XG5cbmZ1bmN0aW9uIFByb2plY3QobmFtZSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICBsZXQgdG9kb3MgPSBbXTtcblxuICBjb25zdCBhZGRUb2RvID0gKHRvZG8pID0+IHtcbiAgICB0b2Rvcy5wdXNoKHRvZG8pO1xuICB9XG5cbiAgcmV0dXJuIHsgbmFtZSwgYWRkVG9kbywgdG9kb3MgfTtcbn1cblxuLy8gRGFzaGJvYXJkXG5cbi8vIExpc3Qgb2YgUHJvamVjdHNcblxuLy8gTGlzdCBvZiBUb2RvcyBmb3IgdGhlIGRheT8gXG5cbi8vIEFsbCBUb2Rvc1xuXG4vLyBUb2RvcyBiYXNlZCBvbiBwcmlvcml0eT9cblxuLy8gQWJpbGl0eSB0byBjcmVhdGUvdXBkYXRlLyBkZWxldGUgdG9kby5cblxuLy8gYWJpbGl0eSB0byBjcmVhdGUvdXBkYXRlL2RlbGV0ZSBwcm9qZWN0XG5cbi8vIEZpcnN0IGludGVyZmFjZSBpcyBUb2RheXMgVG9Eb3NcblxuLypcbmNvbnN0IFRvRG9Db250cm9sbGVyID0gKCkgPT4ge1xuICBjb25zdCBjcmVhdGVUb2RvID0gKGZvcm1EYXRhKSA9PiB7XG4gICAgY29uc3QgdG9kbyA9IEZvcm1Db250cm9sbGVyLmNyZWF0ZVRvZG8oZm9ybURhdGEpO1xuXG4gICAgcHJvamVjdFRvZGF5LmFkZFRvZG8odG9kbyk7XG4gICAgY29uc29sZS5sb2cocHJvamVjdFRvZGF5KTtcbiAgfVxuXG4gIGNvbnN0IGVkaXRUb2RvID0gKGZvcm1EYXRhKSA9PiB7XG4gICAgRm9ybUNvbnRyb2xsZXIuZWRpdFRvZG8oZm9ybURhdGEpO1xuICB9XG5cbiAgcmV0dXJuIHsgY3JlYXRlVG9kbyB9OyBcbn1cblxuKi9cblxuY29uc3QgY3JlYXRlRE9NID0gKCkgPT4ge1xuICBjb25zdCBkaXZNYWluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdk1haW4uaWQgPSAnY29udGVudCc7XG4gIGNvbnN0IGJ0bkNyZWF0ZVRvZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYnRuQ3JlYXRlVG9kby5pbm5lckhUTUwgPSAnKyc7XG5cbiAgYnRuQ3JlYXRlVG9kby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc29sZS5sb2coZSk7XG4gIH0pO1xuXG4gIGRpdk1haW4uYXBwZW5kKGJ0bkNyZWF0ZVRvZG8pO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kQ2hpbGQoZGl2TWFpbik7XG59XG5cbmNvbnN0IGNyZWF0ZUZvcm0gPSAoKSA9PiB7XG4gIGNvbnN0IGRpdk1haW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpO1xuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICBmb3JtLmlkID0gJ2Zvcm0tY3JlYXRlLXRvZG8nO1xuXG4gIGNvbnN0IGlucHV0cyA9IFsndGl0bGUnLCAnZGVzY3JpcHRpb24nLCAnZHVlLWRhdGUnLCAncHJpb3JpdHknLCAnbm90ZXMnXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGlucHV0TmFtZSA9IGlucHV0c1tpXTtcblxuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlucHV0TmFtZSk7XG5cbiAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXQuaWQgPSBpbnB1dE5hbWU7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgaW5wdXROYW1lKTtcbiAgICBcbiAgICBpZiAoaW5wdXROYW1lID09PSAndGl0bGUnIHx8IGlucHV0TmFtZSA9PT0gJ2Rlc2NyaXB0aW9uJykge1xuICAgICAgaW5wdXQudHlwZSA9ICd0ZXh0JztcbiAgICB9IGVsc2UgaWYgKGlucHV0TmFtZSA9PT0gJ2R1ZS1kYXRlJykge1xuICAgICAgaW5wdXQudHlwZSA9ICdkYXRlJztcbiAgICB9XG5cbiAgICBmb3JtLmFwcGVuZChsYWJlbCwgaW5wdXQpO1xuICB9XG5cbiAgLyogU3VibWl0IGlucHV0ICovXG4gIGNvbnN0IGJ0blN1Ym1pdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBidG5TdWJtaXQuaWQgPSAnYnV0dG9uLXN1Ym1pdCc7XG4gIGJ0blN1Ym1pdC50eXBlID0gJ3N1Ym1pdCc7XG4gIGJ0blN1Ym1pdC5pbm5lckhUTUwgPSAnQ3JlYXRlIFRvZG8nO1xuXG4gIGJ0blN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIFxuICAgIEZvcm1Db250cm9sbGVyLmNyZWF0ZVRvZG8oZm9ybS5lbGVtZW50cyk7XG4gIH0pO1xuXG4gIGZvcm0uYXBwZW5kQ2hpbGQoYnRuU3VibWl0KTtcblxuICBkaXZNYWluLmFwcGVuZChmb3JtKTtcbn1cbi8vIHJldHVybnMgYSA2IGVsZW1lbnQgSFRNTCBDb2xsZWN0aW9uXG4vLyBXZSBpdGVyYXRlIHRvIDUsIHdoaWxlIHNraXBwaW5nIHRoZSBsYXN0IG9uZSBiZWNhdXNlIHRoYXQgaXMgdGhlIHN1Ym1pdCBidXR0b24uXG5jb25zdCBGb3JtQ29udHJvbGxlciA9IHtcbiAgLy8gVmFsaWRhdGUgY2hvaWNlcz8gXG4gIGNyZWF0ZVRvZG86IChmb3JtRGF0YSkgPT4ge1xuICAgIGNvbnN0IG5ld1RvZG8gPSBUb0RvKGZvcm1EYXRhWzBdLnZhbHVlLCBmb3JtRGF0YVsxXS52YWx1ZSwgZm9ybURhdGFbMl0udmFsdWUsIGZvcm1EYXRhWzNdLnZhbHVlLCBmb3JtRGF0YVs0XS52YWx1ZSk7XG4gICAgcHJvamVjdFRvZGF5LmFkZFRvZG8obmV3VG9kbyk7XG4gICAgRG9tVXBkYXRlci5hZGROZXdUb2RvKG5ld1RvZG8pO1xuICB9XG59O1xuXG5jb25zdCBEb21VcGRhdGVyID0ge1xuICBhZGROZXdUb2RvOiAodG9kbykgPT4ge1xuICAgIGNvbnN0IGRpdkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpO1xuICAgIFxuICAgIGNvbnN0IGRpdlRvZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXZUb2RvLmlubmVySFRNTCA9IGAke3RvZG8udGl0bGV9LCAke3RvZG8uZHVlRGF0ZX1gO1xuXG4gICAgZGl2Q29udGVudC5hcHBlbmQoZGl2VG9kbyk7XG4gIH1cbn1cblxuLy8gT24gU2NyaXB0IExvYWQsIGxldCdzIGRvIHNvbWUgYmFzaWMgc3R1ZmZcbmNyZWF0ZURPTSgpO1xuY3JlYXRlRm9ybSgpO1xuY29uc3QgcHJvamVjdFRvZGF5ID0gUHJvamVjdCgndG9kYXknKTtcbiJdLCJuYW1lcyI6WyJGb3JtQ29udHJvbGxlciIsImZvcm1EYXRhIiwibmV3VG9kbyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJub3RlcyIsInRoaXMiLCJUb0RvIiwidmFsdWUiLCJwcm9qZWN0VG9kYXkiLCJhZGRUb2RvIiwiRG9tVXBkYXRlciIsImFkZE5ld1RvZG8iLCJ0b2RvIiwiZGl2Q29udGVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkaXZUb2RvIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImFwcGVuZCIsImRpdk1haW4iLCJpZCIsImJ0bkNyZWF0ZVRvZG8iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY29uc29sZSIsImxvZyIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZURPTSIsImZvcm0iLCJpbnB1dHMiLCJpIiwibGVuZ3RoIiwiaW5wdXROYW1lIiwibGFiZWwiLCJzZXRBdHRyaWJ1dGUiLCJpbnB1dCIsInR5cGUiLCJidG5TdWJtaXQiLCJlbGVtZW50cyIsImNyZWF0ZUZvcm0iLCJuYW1lIiwidG9kb3MiLCJwdXNoIiwiUHJvamVjdCJdLCJzb3VyY2VSb290IjoiIn0=